//열거타입 객체
public enum Week {
	
		MONDAY,
		TUESDAY,
		WEDNESDAY,
		THURSDAY,
		FRIDAY,
		SATURDAY,
		SUNDAY
}

//switch 활용

public static void main(String[] args) {
		// TODO Auto-generated method stub
		Week today = null;
		
		Calendar cal = Calendar.getInstance();
		int week = cal.get(Calendar.DAY_OF_WEEK);
		
		switch(week) {
		case 1 : 
			today = Week.SUNDAY;
			break;
		case 2: 
			today = Week.MONDAY;
			break;
		case 3 : 
			today = Week.TUESDAY;
			break;
		case 4 : 
			today = Week.WEDNESDAY;
			break;
		case 5 : 
			today = Week.THURSDAY;
			break;
		case 6 : 
			today = Week.FRIDAY;
			break;
		case 7 : 
			today = Week.SATURDAY;
			break;
		}
		System.out.println("오늘 요일 : "+today);
		
		if(today==Week.SUNDAY) {
			System.out.println("일요일에는 축구를 합니다.");
		}else
			System.out.println("열심히 자바 공부를 합니다.");
		
	}

//열거형 메소드활용
public class EnumMethod_Example {

	public static void main(String[] args) {
		Week today = Week.SUNDAY;
		String name = today.name();
		System.out.println(name);
		
		
		int ordinal = today.ordinal();
		System.out.println(ordinal);
		
		Week day1 = Week.MONDAY;
		Week day2 = Week.WEDNESDAY;
		int result1 = day1.compareTo(day2);
		int result2 = day2.compareTo(day1);
		System.out.println(result1);
		System.out.println(result2);
		
		Week weekDay = Week.valueOf("SUNDAY");
		if(weekDay==Week.SATURDAY||weekDay==Week.SUNDAY) {
			System.out.println("주말이군요");
			
		}else {
			System.out.println("평일이군요!");
		}
		Week[] days = Week.values();
		for(Week day : days) {
			System.out.print(day+" ");
		}
	}

