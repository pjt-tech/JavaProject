Java 되짚어보기 (feat.생활코딩)

*이클립스
IDE - 통합 개발 환경 편집기,컴파일러,디버거,유닛테스트 등 다양한 도구들의 결합
bin - binary = 컴파일할때 확장자가 .class로 저장됨(JVM자바 가상 머신이 이해 할 수 있는 바이트 코드로 이루어진 class파일로 만들어 저장, 이클립스에서 저장시에도 저장됨
src - source 코드 저장

*기본 자료형 
숫자(정수,실수) - byte(1),short(2)
사용할때 명시해줘야하는 타입 = long(8), float(4)
정수의 기본데이터타입 = int(4)
실수의 기본데이터타입 = double(8)
문자(문자와문자열) - char(2), String (클래스)
참,거짓 - boolean(1)

*변수(Variable) - 변하는 값 , 데이터 타입을 반드시 명시해야함.
변수의 효용 - 중복의제거. 가동성이 좋아지며 유지보수가 좋아진다. 고정과 가변적인 변수를 잘 구분해야함.
상수(constant) - 변하지 않는 값

*주석 - 컴파일시에 무시함
// - 한줄주석
/* */ - 별 사이의 텍스트는 모두 주석처리
/** */ 문서화 주석
세미콜론 - 문장이 끝날때 반드시 붙어야 함

*형변환 - 데이터의 형식을 바꾼다. 명시적 형변환과 암시적(자동)형변환이 있다.
정수와 실수는 컴퓨터가 봤을때 전혀 다른 값 이다. 전혀 다른 비트값으로 저장된다.
암시적 형변환(자동) - 데이터의 손실이 없는 경우에는 자동형변환이 일어난다. ex) 작은 것 에서 큰 것 으로 타입을 변경하는 경우 (실수>정수) 
명시적 형변환 - (데이터 타입)데이터 값, '데이터의 손실'을 '감수' 해야한다.

*연산자(operator) - 특정한 작업을 하기 위해서 사용하는 기호
이항 연산자(+ - * / %) = 더하기 빼기 곱하기 나누기 나머지
단항 연산자(++, --)  = 1증가,1감소 전위냐 후위냐에 따라 증가 또는 감소 순서가 달라질수있음 

* 비교와 Boolean (true or false)
비교연산자를 (==, !=) 사용하여 반드시 true or false 를 return

*조건문(if, switch) - boolean값을 기준으로 실행 흐름을 제어, 프로그램 핵심 중 하나
true가 발생하면 해당 구간 실행 후 조건문 종료 ,조건절을 동적으로~ true or false를 명시하지 않는다. 중첩으로 사용가능
-if(조건절){true라면 실행하는 구간}
else if(조건절){앞이false이고 현재가true라면 실행}
else - {조건절이 false일때 실행 }
-swhitch(성립 조건) case 조건 break로 제어 
default - else와 같은 기능, 모든조건이 성립되지 않았을 경우.

*논리 연산자(Conditional operator)
And(&&) - 양쪽이 모두 참인 경우 성립
or(||) - 둘중 하나라도 참인 경우나 둘다 참인경우 성립
not(!) - 부정 boolean값을 반대로 바꿈
연산자 and boolean and 비교 등이 유기적으로 연결되어 하나의 조건문이 완성된다.

*반복문(loop, iteration)
-while(언제까지,true동안)
-for(초기화; 종료조건; 반복실행)
-반복문 제어 (break, continue) 

*배열(array) - 연관된 정보를 그룹핑
반복문과 같이사용 (for, for-each)
고정적인 크기

*메소드(method) == 함수 - 결함이 없고, 유지보수가 쉬운 애플리케이션을 만들기 위한 기법
자바는 프로그램 실행시 main메소드를 호출하도록 약속되어있다.
정의와 호출 , 입력과 출력 , 인자와 매개변수
재활용을 통한 코드량을 줄이고 유지보수에 유리하다.
return - 메소드종료와 동시에 값을 반환 , 메소드에서는 반드시 return 할 값을 명시해야함
void - 반환 값 이 없다.

*입력과 출력



